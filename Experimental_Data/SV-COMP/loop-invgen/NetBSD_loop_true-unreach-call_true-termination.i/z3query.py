from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
pathbuf_off=Int('pathbuf_off')
_1_PROVE=Const('_1_PROVE',arraySort)
glob2_p_off=Int('glob2_p_off')
glob2_pathbuf_off=Int('glob2_pathbuf_off')
glob2_pathlim_off=Int('glob2_pathlim_off')
RET=Int('RET')
bound_off=Int('bound_off')
_2_PROVE=Const('_2_PROVE',arraySort)
MAXPATHLEN=Int('MAXPATHLEN')
bound_off1=Int('bound_off1')
_2_PROVE1=Const('_2_PROVE1',arraySort)
MAXPATHLEN1=Int('MAXPATHLEN1')
glob2_p_off1=Int('glob2_p_off1')
_1_PROVE1=Const('_1_PROVE1',arraySort)
RET1=Int('RET1')
pathbuf_off1=Int('pathbuf_off1')
glob2_pathlim_off1=Int('glob2_pathlim_off1')
d1array1=Const('d1array1',arraySort)
glob2_pathbuf_off1=Int('glob2_pathbuf_off1')
_N1=Const('_N1',IntSort())
_n1=Int('_n1')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array3=Function('d1array3',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(_1_PROVE1 == _1_PROVE)
_s.add(_2_PROVE1 == _2_PROVE)
_s.add(pathbuf_off1 == If(And(__VERIFIER_nondet_int > 0,__VERIFIER_nondet_int < 2147483647),0,pathbuf_off))
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(And(__VERIFIER_nondet_int > 0,__VERIFIER_nondet_int < 2147483647),d1array3(_x1, _x2, _N1),d1array(_x1, _x2)))))
_s.add(glob2_p_off1 == If(And(__VERIFIER_nondet_int > 0,__VERIFIER_nondet_int < 2147483647),_N1,glob2_p_off))
_s.add(glob2_pathbuf_off1 == If(And(__VERIFIER_nondet_int > 0,__VERIFIER_nondet_int < 2147483647),0,glob2_pathbuf_off))
_s.add(glob2_pathlim_off1 == If(And(__VERIFIER_nondet_int > 0,__VERIFIER_nondet_int < 2147483647),__VERIFIER_nondet_int,glob2_pathlim_off))
_s.add(main == 0)
_s.add(bound_off1 == If(And(__VERIFIER_nondet_int > 0,__VERIFIER_nondet_int < 2147483647),__VERIFIER_nondet_int,bound_off))
_s.add(MAXPATHLEN1 == __VERIFIER_nondet_int)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array3(_x1, _x2, 0) == d1array(_x1, _x2))))
_s.add(_N1 > __VERIFIER_nondet_int)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) <= __VERIFIER_nondet_int)))
_s.add(Or(_N1==0,_N1 - 1 <= __VERIFIER_nondet_int))
_s.add(_N1>=0)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1 < __VERIFIER_nondet_int + 1))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	if os.path.isfile('j2llogs.logs'):
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
		file.close()
	else:
		file = open('j2llogs.logs', 'w')
		file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"