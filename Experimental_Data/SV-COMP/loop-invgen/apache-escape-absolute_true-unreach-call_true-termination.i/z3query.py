from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_6_PROVE=Const('_6_PROVE',arraySort)
_11_PROVE=Int('_11_PROVE')
RET=Int('RET')
_4_PROVE=Int('_4_PROVE')
break_1_flag=Int('break_1_flag')
cp=Int('cp')
tokenlen=Int('tokenlen')
_17_PROVE=Const('_17_PROVE',arraySort)
_12_PROVE=Int('_12_PROVE')
_1_PROVE=Int('_1_PROVE')
_3_PROVE=Int('_3_PROVE')
_14_PROVE=Const('_14_PROVE',arraySort)
_9_PROVE=Int('_9_PROVE')
scheme=Int('scheme')
_10_PROVE=Int('_10_PROVE')
_2_ASSUME=Int('_2_ASSUME')
_3_ASSUME=Int('_3_ASSUME')
_13_PROVE=Const('_13_PROVE',arraySort)
_7_PROVE=Int('_7_PROVE')
_2_PROVE=Int('_2_PROVE')
_8_PROVE=Int('_8_PROVE')
c=Int('c')
_15_PROVE=Const('_15_PROVE',arraySort)
urilen=Int('urilen')
_16_PROVE=Const('_16_PROVE',arraySort)
_5_PROVE=Const('_5_PROVE',arraySort)
_1_ASSUME=Int('_1_ASSUME')
_18_PROVE=Const('_18_PROVE',arraySort)
tokenlen1=Int('tokenlen1')
_5_PROVE1=Const('_5_PROVE1',arraySort)
_7_PROVE1=Int('_7_PROVE1')
_14_PROVE1=Const('_14_PROVE1',arraySort)
_16_PROVE1=Const('_16_PROVE1',arraySort)
_1_PROVE1=Int('_1_PROVE1')
_3_PROVE1=Int('_3_PROVE1')
_10_PROVE1=Int('_10_PROVE1')
_18_PROVE1=Const('_18_PROVE1',arraySort)
_1_ASSUME1=Int('_1_ASSUME1')
_13_PROVE1=Const('_13_PROVE1',arraySort)
_2_ASSUME1=Int('_2_ASSUME1')
urilen1=Int('urilen1')
_6_PROVE1=Const('_6_PROVE1',arraySort)
cp1=Int('cp1')
_11_PROVE1=Int('_11_PROVE1')
scheme1=Int('scheme1')
_17_PROVE1=Const('_17_PROVE1',arraySort)
_2_PROVE1=Int('_2_PROVE1')
_9_PROVE1=Int('_9_PROVE1')
_4_PROVE1=Int('_4_PROVE1')
RET1=Int('RET1')
c1=Int('c1')
d1array1=Const('d1array1',arraySort)
_3_ASSUME1=Int('_3_ASSUME1')
_8_PROVE1=Int('_8_PROVE1')
_15_PROVE1=Const('_15_PROVE1',arraySort)
break_1_flag1=Int('break_1_flag1')
_12_PROVE1=Int('_12_PROVE1')
cp7=Function('cp7',IntSort(),IntSort())
_N1=Const('_N1',IntSort())
c16=Function('c16',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array7=Function('d1array7',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(_17_PROVE1 == _17_PROVE)
_s.add(_15_PROVE1 == _15_PROVE)
_s.add(_6_PROVE1 == _6_PROVE)
_s.add(_14_PROVE1 == _14_PROVE)
_s.add(_16_PROVE1 == _16_PROVE)
_s.add(_13_PROVE1 == _13_PROVE)
_s.add(_5_PROVE1 == _5_PROVE)
_s.add(_18_PROVE1 == _18_PROVE)
_s.add(c1 == If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int >= 0,If(And((__VERIFIER_nondet_int!=0),__VERIFIER_nondet_int - 1 >= __VERIFIER_nondet_int),If(__VERIFIER_nondet_int > 0,If(cp7(_N1)!=__VERIFIER_nondet_int - 1,If(cp7(_N1) + 1!=__VERIFIER_nondet_int - 1,If(__VERIFIER_nondet_int > 0,c16(_N2),c),c),c),c),c),c),c),c))
_s.add(cp1 == If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int >= 0,If(And((__VERIFIER_nondet_int!=0),__VERIFIER_nondet_int - 1 >= __VERIFIER_nondet_int),If(__VERIFIER_nondet_int > 0,If(cp7(_N1)!=__VERIFIER_nondet_int - 1,If(cp7(_N1) + 1!=__VERIFIER_nondet_int - 1,If(__VERIFIER_nondet_int > 0,_N2 + cp7(_N1) + 1,cp7(_N1) + 1),cp7(_N1)),cp7(_N1)),__VERIFIER_nondet_int),cp),cp),cp),cp))
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int >= 0,If(And((__VERIFIER_nondet_int!=0),__VERIFIER_nondet_int - 1 >= __VERIFIER_nondet_int),If(__VERIFIER_nondet_int > 0,If(cp7(_N1)!=__VERIFIER_nondet_int - 1,If(cp7(_N1) + 1!=__VERIFIER_nondet_int - 1,If(__VERIFIER_nondet_int > 0,d1array16(_x1, _x2, _N2),d1array7(_x1, _x2, _N1)),d1array7(_x1, _x2, _N1)),d1array7(_x1, _x2, _N1)),d1array(_x1, _x2)),d1array(_x1, _x2)),d1array(_x1, _x2)),d1array(_x1, _x2)),d1array(_x1, _x2)))))
_s.add(urilen1 == __VERIFIER_nondet_int)
_s.add(main == 0)
_s.add(break_1_flag1 == If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int >= 0,If(And((__VERIFIER_nondet_int!=0),__VERIFIER_nondet_int - 1 >= __VERIFIER_nondet_int),If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int > 0,1,0),0),0),0),0),0))
_s.add(scheme1 == If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int > 0,If(__VERIFIER_nondet_int >= 0,If(And((__VERIFIER_nondet_int!=0),__VERIFIER_nondet_int - 1 >= __VERIFIER_nondet_int),If(__VERIFIER_nondet_int > 0,If(cp7(_N1)!=__VERIFIER_nondet_int - 1,If(cp7(_N1) + 1!=__VERIFIER_nondet_int - 1,cp7(_N1) + 1,__VERIFIER_nondet_int),__VERIFIER_nondet_int),__VERIFIER_nondet_int),__VERIFIER_nondet_int),__VERIFIER_nondet_int),__VERIFIER_nondet_int),__VERIFIER_nondet_int))
_s.add(tokenlen1 == __VERIFIER_nondet_int)
_s.add(ForAll([_n1],Implies(_n1>=0,cp7(_n1 + 1) == If(If(__VERIFIER_nondet_int > 0,1,0)==0,cp7(_n1) + 1,cp7(_n1)))))
_s.add(cp7(0) == __VERIFIER_nondet_int)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array7(_x1, _x2, 0) == d1array(_x1, _x2))))
_s.add(Or((cp7(_N1)==__VERIFIER_nondet_int - 1),(If(__VERIFIER_nondet_int > 0,1,0)!=0)))
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),And((cp7(_f(_n1))!=__VERIFIER_nondet_int - 1),(If(__VERIFIER_nondet_int > 0,1,0)==0)))))
_s.add(Or(_N1==0,And((cp7((_N1-1))!=__VERIFIER_nondet_int - 1),(If(__VERIFIER_nondet_int > 0,1,0)==0))))
_s.add(ForAll([_n2],Implies(_n2>=0,c16(_n2 + 1) == If(__VERIFIER_nondet_int > 0,c16(_n2) + 1,c16(_n2)))))
_s.add(c16(0) == 0)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array16(_x1, _x2, 0) == d1array7(_x1, _x2, _N1))))
_s.add(Or((_N2 + cp7(_N1) + 1==__VERIFIER_nondet_int - 1),c16(_N2) >= __VERIFIER_nondet_int - 1))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),And((_f(_n2) + cp7(_N1) + 1!=__VERIFIER_nondet_int - 1),c16(_f(_n2)) < __VERIFIER_nondet_int - 1))))
_s.add(Or(_N2==0,And(((_N2-1) + cp7(_N1) + 1!=__VERIFIER_nondet_int - 1),c16((_N2-1)) < __VERIFIER_nondet_int - 1)))
_s.add(_N1>=0)
_s.add(_N2>=0)
_s.add(And(__VERIFIER_nondet_int <= 1000000,__VERIFIER_nondet_int >= -1000000))
_s.add(And(__VERIFIER_nondet_int <= 1000000,__VERIFIER_nondet_int >= -1000000))
_s.add(And(__VERIFIER_nondet_int <= 1000000,__VERIFIER_nondet_int >= -1000000))
_s.add(Not(Implies(__VERIFIER_nondet_int > 0,Implies(__VERIFIER_nondet_int > 0,Implies(__VERIFIER_nondet_int >= 0,Implies(And((__VERIFIER_nondet_int!=0),__VERIFIER_nondet_int - 1 >= __VERIFIER_nondet_int),Implies(__VERIFIER_nondet_int > 0,Implies(cp7(_N1)!=__VERIFIER_nondet_int - 1,0 <= cp7(_N1) + 1))))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loop-invgen/apache-escape-absolute_true-unreach-call_true-termination.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loop-invgen/apache-escape-absolute_true-unreach-call_true-termination.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	if os.path.isfile('j2llogs.logs'):
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
		file.close()
	else:
		file = open('j2llogs.logs', 'w')
		file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"