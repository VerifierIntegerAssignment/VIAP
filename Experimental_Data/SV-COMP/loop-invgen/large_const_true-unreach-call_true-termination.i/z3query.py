from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_1_PROVE=Const('_1_PROVE',arraySort)
i=Int('i')
k=Int('k')
c2_var=Int('c2_var')
RET=Int('RET')
n=Int('n')
_2_ASSUME=Int('_2_ASSUME')
v=Int('v')
_1_ASSUME=Int('_1_ASSUME')
j=Int('j')
c1_var=Int('c1_var')
c3_var=Int('c3_var')
v1=Int('v1')
c2_var1=Int('c2_var1')
i1=Int('i1')
RET1=Int('RET1')
j1=Int('j1')
_1_PROVE1=Const('_1_PROVE1',arraySort)
k1=Int('k1')
_2_ASSUME1=Int('_2_ASSUME1')
c1_var1=Int('c1_var1')
n1=Int('n1')
d1array1=Const('d1array1',arraySort)
c3_var1=Int('c3_var1')
_1_ASSUME1=Int('_1_ASSUME1')
k7=Function('k7',IntSort(),IntSort())
_N1=Const('_N1',IntSort())
k10=Function('k10',IntSort(),IntSort())
k1=Function('k1',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array7=Function('d1array7',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(_1_PROVE1 == _1_PROVE)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == d1array10(_x1, _x2, _N2))))
_s.add(i1 == _N1)
_s.add(k1 == k10(_N2))
_s.add(j1 == _N2)
_s.add(main == 0)
_s.add(n1 == __VERIFIER_nondet_int)
_s.add(v1 == __VERIFIER_nondet_int)
_s.add(c1_var1 == 4000)
_s.add(c3_var1 == 10000)
_s.add(c2_var1 == 2000)
_s.add(ForAll([_n1],Implies(_n1>=0,k7(_n1 + 1) == If(__VERIFIER_nondet_int==0,k7(_n1) + 4000,If(__VERIFIER_nondet_int==1,k7(_n1) + 10000,k7(_n1))))))
_s.add(ForAll([_x2,_x1,_n1],Implies(And(_x2>=0,_n1>=0),d1array7(_x1, _x2, _n1 + 1) == If(And((_x1==0),(_x2==_n1 + 1)),And(0 <= __VERIFIER_nondet_int,__VERIFIER_nondet_int < 2),d1array7(_x1, _x2, _n1)))))
_s.add(k7(0) == 0)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array7(_x1, _x2, 0) == d1array(_x1, _x2))))
_s.add(_N1 >= __VERIFIER_nondet_int)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < __VERIFIER_nondet_int)))
_s.add(Or(_N1==0,_N1 - 1 < __VERIFIER_nondet_int))
_s.add(ForAll([_n2],Implies(_n2>=0,k10(_n2 + 1) == k10(_n2) - 1)))
_s.add(k10(0) == k7(_N1))
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array10(_x1, _x2, 0) == d1array7(_x1, _x2, _N1))))
_s.add(_N2 >= __VERIFIER_nondet_int)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < __VERIFIER_nondet_int)))
_s.add(Or(_N2==0,_N2 - 1 < __VERIFIER_nondet_int))
_s.add(_N1>=0)
_s.add(_N2>=0)
_s.add(And(0 <= __VERIFIER_nondet_int,__VERIFIER_nondet_int < 10))
_s.add(Not(ForAll([_n2],k10(_n2) > 0)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loop-invgen/large_const_true-unreach-call_true-termination.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loop-invgen/large_const_true-unreach-call_true-termination.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	if os.path.isfile('j2llogs.logs'):
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
		file.close()
	else:
		file = open('j2llogs.logs', 'w')
		file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"